plugins {
	id 'java'
	id 'application'
	id 'maven-publish'
}

dependencies {
	implementation project(':mdsl-core')
	implementation "commons-cli:commons-cli:${commonsCliVersion}"
}

application {
	mainClass.set('io.mdsl.cli.MDSLCommandLineInterface')
	applicationName = 'mdsl'
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('cli-sources')
}

tasks.register('javadocJar', Jar) {
    from tasks.javadoc
    archiveClassifier.set('cli-javadoc')
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			customizePom(pom)

			artifactId = "${project.name}"
			groupId = "${project.group}"
			version = "${project.version}"
			from components.java
			artifact tasks.sourcesJar
			artifact tasks.javadocJar
			artifact tasks.distZip
			artifact tasks.distTar

			pom.withXml {
				def pomFile = file("${project.buildDir}/generated-pom.xml")
				writeTo(pomFile)
			}
		}
	}
}

def customizePom(pom) {
	pom.withXml {
		def root = asNode()

		// eliminate test-scoped dependencies
		root.dependencies.removeAll { dep ->
			dep.scope == "test"
		}

		root.children().last() + {
			resolveStrategy = Closure.DELEGATE_FIRST

			description 'Microservice Domain-Specific Language CLI (Command Line Interface)'
			name 'MDSL CLI'
			url 'https://github.com/Microservice-API-Patterns/MDSL-Specification'
			organization {
				name 'Microservice API Patterns (MAP)'
				url 'https://github.com/Microservice-API-Patterns'
			}
			issueManagement {
				system 'GitHub'
				url 'https://github.com/Microservice-API-Patterns/MDSL-Specification/issues'
			}
			licenses {
				license {
					name 'Apache License 2.0'
					url 'https://github.com/Microservice-API-Patterns/MDSL-Specification/blob/master/LICENSE'
					distribution 'repo'
				}
			}
			scm {
				url 'https://github.com/Microservice-API-Patterns/MDSL-Specification'
				connection 'scm:git:git://github.com/Microservice-API-Patterns/MDSL-Specification.git'
				developerConnection 'scm:git:ssh://git@github.com:Microservice-API-Patterns/MDSL-Specification.git'
			}
		}
	}
}

model {
	tasks.generatePomFileForMavenJavaPublication {
		destination = file("$buildDir/generated-pom.xml")
	}
}

tasks.withType(CreateStartScripts).each { task ->
	task.doLast {
		String text = task.windowsScript.text
		text = text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, { "${it[1]}*" })
		task.windowsScript.write text
	}
}
