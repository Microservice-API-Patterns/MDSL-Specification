dependencies {
	implementation project(':mdsl-core')
	implementation "org.eclipse.xtext:org.eclipse.xtext.ide:${xtextVersion}"
	implementation "org.eclipse.xtext:org.eclipse.xtext.xbase.ide:${xtextVersion}"
}

apply plugin: 'application'
mainClassName = "org.eclipse.xtext.ide.server.ServerLauncher"

//this is an eclipse plugin project
eclipseClasspath.enabled=false
cleanEclipseClasspath.enabled=false

tasks.register('sourcesJar', Jar) {
	from sourceSets.main.allJava
	archiveClassifier.set('ide-sources')
}

tasks.register('javadocJar', Jar) {
	from tasks.javadoc
	archiveClassifier.set('ide-javadoc')
}

sourcesJar.dependsOn(generateXtext)

publishing {
	publications {
		mavenJava(MavenPublication) {
			customizePom(pom)

			artifactId = "${project.name}"
			groupId = "${project.group}"
			version = "${project.version}"
			from components.java
			artifact sourcesJar
			artifact javadocJar
			artifact distZip
			artifact distTar

			pom.withXml {
				def pomFile = file("${project.buildDir}/generated-pom.xml")
				writeTo(pomFile)
			}
		}
	}
}

def customizePom(pom) {
	pom.withXml {
		def root = asNode()

		// eliminate test-scoped dependencies
		root.dependencies.removeAll { dep ->
			dep.scope == "test"
		}

		root.children().last() + {
			resolveStrategy = Closure.DELEGATE_FIRST

			description 'MDSL Language Server (LSP) to integrate the MDSL editor within your IDE.'
			name 'Microservice Domain-Specific Language (MDSL) Language Server'
			url 'https://github.com/Microservice-API-Patterns/MDSL-Specification'
			organization {
				name 'Microservice API Patterns'
				url 'https://github.com/Microservice-API-Patterns'
			}
			issueManagement {
				system 'GitHub'
				url 'https://github.com/Microservice-API-Patterns/MDSL-Specification/issues'
			}
			licenses {
				license {
					name 'Apache License 2.0'
					url 'https://github.com/Microservice-API-Patterns/MDSL-Specification/blob/master/LICENSE'
					distribution 'repo'
				}
			}
			scm {
				url 'https://github.com/Microservice-API-Patterns/MDSL-Specification'
				connection 'scm:git:git://github.com/Microservice-API-Patterns/MDSL-Specification.git'
				developerConnection 'scm:git:ssh://git@github.com:Microservice-API-Patterns/MDSL-Specification.git'
			}
		}
	}
}

model {
	tasks.generatePomFileForMavenJavaPublication {
		destination = file("$buildDir/generated-pom.xml")
	}
}

tasks.withType(CreateStartScripts).each { task ->
	task.doLast {
		String text = task.windowsScript.text
		text = text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, { "${it[1]}*" })
		task.windowsScript.write text
	}
}
