/*
 * Copyright 2018-2021 Olaf Zimmermann (a.k.a. socadk)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

grammar io.mdsl.APIDescription with org.eclipse.xtext.common.Terminals

/*  
---
title: Microservices Domain Specific Language (MDSL) Language Specification
author: Olaf Zimmermann
copyright: Olaf Zimmermann, 2018-2024. All rights reserved.
version: "6.0.0"
---
*/ 

generate apiDescription "http://www.mdsl.io/APIDescription"

ServiceSpecification hidden(WS, ML_COMMENT, SL_COMMENT): 
	'API' 'description' name=ID
    ('version' svi=SemanticVersioningIdentifier)? // plain STRING
    ('usage' 'context' reach=Visibility ('for' direction+=DirectionList)?)? // made 'for' optional (test case required)
	('overview' description=STRING)? 
    types+=DataContract*
    links+=LinkContract* 
    events+=EventTypes* // experimental preview 
    commands+=CommandTypes* // experimental preview
	contracts+=(EndpointContract|ChannelContract)* // ChannelContract is AsyncMDSL extension	
	slas+=SLATemplate*
	providers+=(Provider|MessageBroker)* // MessageBroker is AsyncMDSL extension
	clients+=(Client|MessageEndpoint)* // MessageEndpoint is AsyncMDSL extension
	gateways+=Gateway* // experimental preview  
	orchestrations+=Orchestration* // experimental preview
	realizations+=ProviderImplementation* // experimental preview
	scenarios+=IntegrationScenario* // experimental preview
	('IPA')? // IPA is the inversion of API
;

// ** This MDSL grammar defines several sub-languages (orthogonal to each other): 
//
// * A) schema (data types)
// * B) service endpoints (including operations) 
// * C) instance-level concepts (provider, client, gateway; implementation)
// * D) orchestration flows and integration scenarios (experimental)


Visibility: 'PUBLIC_API' | 'COMMUNITY_API' | 'SOLUTION_INTERNAL_API' | STRING;

DirectionList:
	primaryDirection=Direction ('and' otherDirection=Direction)?
;

Direction: 'FRONTEND_INTEGRATION' | 'BACKEND_INTEGRATION' | STRING;

SemanticVersioningIdentifier: STRING; // format could be checked by API linters

// *** Part A: data contract/types 

DataContract:
	'data' 'type' name=ID 
	('version' svi=SemanticVersioningIdentifier)? 
	structure=ElementStructure
	default=DefaultValue? // still an experimental preview
;

// rule name could also be "RelationType", as a relation is a typed link in context
LinkContract:
	'relation' 'type' name=ID // this is the type info
	('version' svi=SemanticVersioningIdentifier)? 
	'targets' (ept=[EndpointContract] | ('any'|'external') 'resource' ('at' urn=STRING)?)
	('action' operation=ID ('input' dataType=[DataContract])?)?
	 // HTTP Verb and MediaType added in HTTP binding for now
;

EventTypes: 
	'event' 'type' events+=EventType (',' events+=EventType)* // default?
;

EventType:  
	name=ID ( 
	('version' svi=SemanticVersioningIdentifier)? // version can only be given if structure is there
	content=ElementStructure)? // the domain data reported, part of published language
;

CommandTypes:
	'command' 'type' commands+=CommandType (',' commands+=CommandType)*
;

CommandType:
	name=ID 
	('version' svi=SemanticVersioningIdentifier)? 
	(subject=ElementStructure)? // the in/out data or the business object/item processed
	// default?
;


// *** Part B: service endpoint contracts (with operations)

ElementStructure: 
	pf=ParameterForest | pt=ParameterTree | apl=AtomicParameterList  | np=SingleParameterNode
;

ParameterForest:
	classifier=PatternStereotype?
	'[' ptl=ParameterTreeList ']' 
	;


 
// Common parts:

ParameterTreeList:
	first=ParameterTree (';' next+=ParameterTree)* // limitation: no external type reference allowed here
;

ParameterTree:
	classifier=PatternStereotype? 
	(name=STRING':')?
	'{' 
	  first=TreeNode ((','|'|') nexttn+=TreeNode)* // limitation: no difference between ',' and '|'
	'}' 
	card=Cardinality? 
;

TreeNode:
	pn=SingleParameterNode | apl=AtomicParameterList | children=ParameterTree
;

SingleParameterNode: 
	// Markdown-ish syntax for link reference was experimental, R<> caused problems earlier 
	genP=GenericParameter | atomP=AtomicParameter | tr=TypeReference // | lr=LinkReference
;

GenericParameter: 
	name=STRING // this makes it possible to only have a name/id, but no role (yet)
	| p='P' // unspecified, P stands for 'Parameter' or 'PayloadPart' or 'Placeholder'
	| name=STRING ":" 'P' // this option is not documented and tested much; could deprecate
;

/*
// experimental, causes compatibility issues (dcref in TypeReference rule might be null)
LinkTypeReference:
	'[' lcref=[LinkContract] ']' 
;
*/ 

TypeReference: 
	classifier=PatternStereotype? 
	(name=STRING':')? (dcref=[DataContract] /* lref=LinkTypeReference */)
	card=Cardinality?
;

AtomicParameterList:
	classifier=PatternStereotype? 
	(name=STRING':')? 
	'(' first=AtomicParameter ((','|'|') nextap+=AtomicParameter)* ')' 
	card=Cardinality? 	
;

AtomicParameter: 
	classifier=PatternStereotype? 
	rat=RoleAndType
	card=Cardinality?
;

RoleAndType: 
	// experimental  |'->' ec=[EndpointContract] taken out again
    (name=STRING':')? role=ParameterRole ('<'btype=BasicDataType'>' )? 
;


DefaultValue:
	'default' 'is' default=STRING
;

PatternStereotype:
    '<<' (pattern=MapPattern | eip=EipPattern | name=ID) '>>' // TODO (future work): either name in this rule or STRING in MapPattern rule can go
;

EipPattern:
	'Command_Message' | 'Document_Message' | 'Event_Message'
;

MapPattern:
	'API_Key' | 'Context_Representation' | 'Error_Report' | 'Request_Bundle' | 'Request_Condition' | 'Wish_List' | 'Wish_Template' 
	| 'Embedded_Entity' | 'Linked_Information_Holder' | 'Annotated_Parameter_Collection' | 'Pagination' 
	| 'Data_Element' | 'Identifier_Element' | 'Id_Element' | 'Link_Element' | 'Metadata_Element'  | 'Control_Metadata' | 'Aggregated_Metadata' | 'Provenance_Metadata' 
	| 'Command' | 'Response_Bundle' | 'Version_Identifier'
	| STRING  
;

ParameterRole:
	  'D' // (Atomic) Data Value, Entity or Value Object from DDD
	| 'MD' // // e.g. in Annotated Parameter Collection: {MD,(MD,D),(MD,D),...}
	| 'ID' // Identifier (globally or locally unique, not network accessible
	| 'L' // e.g. URI. Linked Information Holder: {(ID,D1,..,DN,L} for HATEOAS, e.g. "nextPage":Link<Customer>* 
	| 'Data'
	| 'Metadata'
	| 'Identifier'
	| 'Link' 
//	| ActionCode
;

/*
ActionCode:
	'CREATE' | 'FULL_UPDATE' | 'PARTIAL_UPDATE' | 'DELETE' | 'GET' | 'MORE_DATA' | other=STRING
;
*/ 

BasicDataType:
	// TODO (future work): specify and document value ranges (same as OAS? CloudEvents?) abstract level or binding? how about 'date'?
 	'bool' | 'int' | 'long' | 'double' | 'string' | 'raw' | 'void' // 'record', 'map' and 'array' do not make sense here
	;

Cardinality:
	zeroOrOne='?' | zeroOrMore='*' | atLeastOne='+' | exactlyOne='!'
;


// *** Part B: service endpoint contracts (with operations)

EndpointContract:
	'endpoint' 'type' name=ID 
	('version' svi=SemanticVersioningIdentifier)? 
	// TODO (future work): support multiple flows and scenarios ('+= ...*')
	('supports' ('flow' flow=[Orchestration]|'scenario'scenario=[IntegrationScenario]))?
	('serves' 'as' primaryRole=ResourceRole ('and' otherRoles+=ResourceRole)* 'role'?)?
	sp=SecurityPolicy?
	('exposes' ops+=Operation+)? // optional because early incomplete specifications do not have to expose any operations 
	('receives' events+=Event+)?
;

// added non MAPs: MUTABLE_COLLECTION_RESOURCE (secondary role of any type of INFORMATION_HOLDER_RESOURCE), 
// stereotypes for 'STATEFUL_PROCESSING_RESOURCE' and 'STATELESS_PROCESSING_RESOURCE' (CFs only), VALIDATION_RESOURCE, TRANSFORMATION_RESOURCE
ResourceRole: 'PROCESSING_RESOURCE' | 'INFORMATION_HOLDER_RESOURCE' | 'OPERATIONAL_DATA_HOLDER' | 'MASTER_DATA_HOLDER' | 'REFERENCE_DATA_HOLDER' | 'DATA_TRANSFER_RESOURCE' | 'LINK_LOOKUP_RESOURCE' 
	| 'STATEFUL_PROCESSING_RESOURCE' | 'STATELESS_PROCESSING_RESOURCE' | 'VALIDATION_RESOURCE' | 'TRANSFORMATION_RESOURCE' | 'COLLECTION_RESOURCE' | 'MUTABLE_COLLECTION_RESOURCE' | STRING
;

Event: 
	'event'
	type=[EventType]
	('version' svi=SemanticVersioningIdentifier)?
;

Operation:
	'operation' 
	name=ID 
	('version' svi=SemanticVersioningIdentifier)?
	('with' 'responsibility' responsibility=OperationResponsibility)? 
	// TODO (future work):  add ('supporting' stakeholder=STRING)? // for actor from story
	('in'  mep=MessageExchangePattern 'conversation')? 
	('expecting' requestMessage=DataTransferRepresentation)? // request message is optional
	('delivering' responseMessage=DataTransferRepresentation 
	  ('links' relations+=RelationshipLink+)? // optional within 'delivering'
	  ('reporting' reports=StatusReports)? // optional within 'delivering'
	)? // response message is optional 
	('transitions' st=StateTransition)? // or IDs, [Refs], to be defined above? [R] export as OpenAPI comment?
	('emitting' events+=Event+)? // or 'publishing'? 'sending'? `producing`?
	('compensated' 'by' undo=[Operation])? // could also be expressed as link relation
	('protected' 'by' policies=SecurityPolicies)?
;

// note: CML is more expressive here, see https://contextmapper.org/docs/aggregate/
// methods can define read, read-write, etc. (done via MAP role decorators here); state machine is on Aggregate level in CML
StateTransition:
	'from' from=STRING 'to' to=STRING // TODO v55 make 'from' part optional
;

RelationshipLink:
	name=STRING ':' lcref=[LinkContract]
;

StatusReports:
	reportList+=StatusReport+
;

StatusReport:
	('status' | 'error' | 'analytics') name=ID reportData=ElementStructure?
;

SecurityPolicies:
	policyList+=SecurityPolicy+
;

SecurityPolicy: 
	 'policy' name=ID securityObject=ElementStructure?
;

// TODO might need add/remove marker for COLLECTION_RESOURCE vs. its elements/items here (for HTTP binding)
// if added, implement new ones in validators and OAS generator, use/document variants consistently, document them
// consider aliases such as "FULL_UPDATE_OPERATION" and "PARTIAL_UPDATE_OPERATION"
OperationResponsibility: cf='COMPUTATION_FUNCTION' | sco='STATE_CREATION_OPERATION' | ro='RETRIEVAL_OPERATION' | sto='STATE_TRANSITION_OPERATION' | ep='EVENT_PROCESSOR' | bap='BUSINESS_ACTIVITY_PROCESSOR' | sro='STATE_REPLACEMENT_OPERATION' | sdo='STATE_DELETION_OPERATION' | other=STRING;

MessageExchangePattern: 'ONE_WAY' | 'REQUEST_REPLY' | 'NOTIFICATION' | STRING; // TODO (future work) add SERVER_SENT_EVENTS and gRPC 1:n, n:1, n:m streaming?  
	
// TODO (future work) make payload optional (but header or payload must be there); workaround: 'P' or D<void> payload
DataTransferRepresentation:
	('headers' headers=ElementStructure)? 
	'payload' payload=ElementStructure // this could be an embedded XSD or JSON Schema (or an external one referenced via URI, see V4.x bindings)
	('structured' 'as' ts=TypeSystem)? 
;

TypeSystem: 
	'MAP_TYPE' | 'JOLIE_TYPE' | 'JSON_SCHEMA' | 'XML_SCHEMA' |'PROTOCOL_BUFFER' | 'AVRO_SCHEMA' | 'THRIFT_TYPE' | 'GRAPHQL_SDL' | 'OTHER' | STRING 
;

// AsyncMDSL extensions: 

// TODO (future work) add flow/scenario link (see endpoint contract)?
ChannelContract:
	'channel' name=ID
	// not yet:	('supports' ('flow' flow=[Orchestration]|'scenario'scenario=[IntegrationScenario]))? // could go from '?' to '*' here
	('of' 'type' types+=ChannelType (',' types+=ChannelType)*)?
	('delivery' 'guarantee' quality=DeliveryGuarantee)?
	conversationType=(RequestReplyChannel|OneWayChannel) // TODO a channel should be able to transfer messages of multiple (data) types
;

enum ChannelType:
	POINT_TO_POINT | PUBLISH_SUBSCRIBE | DATA_TYPE | INVALID_MESSAGE | DEAD_LETTER | GUARANTEED_DELIVERY
;

// Xtext initializes 'quality' using the first value of this enum, which will act as null and default value
enum DeliveryGuarantee:
	UNKNOWN | AT_LEAST_ONCE | AT_MOST_ONCE | EXACTLY_ONCE 
;

BindingValue:
	{BindingValue} str=STRING | {BindingValue} number=INT | bool=('true' | 'false')
;

BindingParameter:
	name=STRING ':' value=(BindingValue | BindingParams)
;

BindingParams:
	'{'
		params+=BindingParameter
		(',' params+=BindingParameter)*
	'}'
;

BasicParameterWithDescription:
	paramName=ID ':' type=BasicDataType (',' description=STRING)?
;

ChannelPathWithParams:
	'path' path=STRING
	('with' 
		params+=BasicParameterWithDescription
		(',' params+=BasicParameterWithDescription)?
	)?
;

RequestReplyChannel:
	request=RequestChannel
	reply=ReplyChannel

;

RequestChannel:
	'request' 'message' name=ID 
		(('description' description=STRING)? &
		'on' path=ChannelPathWithParams)
		'expecting' payload=Payload
		('where' whereClauses+=WhereClauses (',' whereClauses+=WhereClauses)*)?
		('bindings' 'for' protocol=ProtocolBinding bindings=BindingParams)? 
;

ReplyChannel:
	'reply' 'message' name=ID 
		(('description' description=STRING)? &
		'on' path=ChannelPathWithParams)
		'delivering' payload=Payload
		('where' whereClauses+=WhereClauses (',' whereClauses+=WhereClauses)*)?
		('bindings' 'for' protocol=ProtocolBinding bindings=BindingParams)?
;

Payload:
	schema=DataTransferRepresentation	
	('as' messageType=MessageType)?
;

// TODO acceptsAndProduces= (now) or acceptsAndProduces?= (see other options)?
OneWayChannel:
	(('description' description=STRING)? &
	'on' path=ChannelPathWithParams)
	(subscribe?='accepts' | publish?='produces' | acceptsAndProduces='accepts' 'and' 'produces') message=Message // TODO more than one (data) type?
	('where' whereClauses+=WhereClauses (',' whereClauses+=WhereClauses)*)? // impact on where clauses if multiple message types can be exchanged?
	('bindings' 'for' protocol=ProtocolBinding bindings=BindingParams)?
;

Message:
	'message' name=ID 
	('description' description=STRING)?
	(deliveringPayload?='delivering' | expectingPayload?='expecting') payload=Payload
;

WhereClauses:
	MessageExpireWhereClause
	|	SequenceIdWhereClause
    |	CorrelationIdWhereClause
;

MessageExpireWhereClause:
	'MESSAGE_EXPIRES' 'in' messageExpire=INT messageExpireUnit=MessageExpireUnit
;

SequenceIdWhereClause:
	'SEQUENCE_ID' 'is' expression=STRING
;

CorrelationIdWhereClause:
	'CORRELATION_ID' 'is' source=STRING
;

enum MessageExpireUnit:
	s | m // seconds or minutes
;

enum MessageType:
	COMMAND_MESSAGE | EVENT_MESSAGE | DOCUMENT_MESSAGE
;


// *** C.1: provider/endpoint part 

Provider:
	'API' 'provider' // | ms= 'Message' 'sender' (MOM support was experimental)
	name=ID
	('version' svi=SemanticVersioningIdentifier)? 
	epl+=EndpointList+ // [Q] is list here (+) and in EndpointInstance needed (*)? 
	('under' 'conditions' tsandcs=STRING | 'with' 'provider' sla=SLA)? // neither Ts&Cs nor SLA must be present
	('provider' 'governance'  evolStrat=EvolutionStrategy)? 
;

EndpointList:	
	'offers' contract=[EndpointContract] // one endpoint can only offer a single contract (but provider can have multiple endpoints)
	endpoints+=EndpointInstance* // optional; several endpoints per contract mean redundant deployment (or different SLAs for same functionality) 
;

EndpointInstance: 
	'at' 'endpoint' 'location' location=STRING  
	pb+=TechnologyBinding+ // changed from * to + 
	('with' 'endpoint' sla=SLA)? // SLA is optional
	('endpoint' 'governance'  evolStrat=EvolutionStrategy)?
;

// AsyncMDSL: 

MessageBroker:
	'message' 'broker' name=ID
	('description' description=STRING)?
	('exposes' epl+=AsyncEndpoint (',' epl+=AsyncEndpoint)?)+
	
;

AsyncEndpoint:
	contracts+=[ChannelContract] (',' contracts+=[ChannelContract])*
	'at' 'location' location=STRING
	pb=TechnologyBinding
	('bindings' bindings=BindingParams)?
	('policy' name=ID 'realized' 'using' securityPolicy=OASSecurity ('in' securityPolicyExpression=STRING)?)? 
;


// ** technology binding (simple/advanced)

TechnologyBinding:
	'via' 'protocol' protBinding=ProtocolBinding 
;

ProtocolBinding:
	http=HTTPBinding | java=JavaBinding | grpc=GRPCBinding | other=OtherBinding
;

HTTPBinding:
	http='HTTP' ('static'|'dynamic')? 'binding' eb+=HTTPResourceBinding+
;

HTTPResourceBinding:
	// decided not make resource name=ID ... optional (used in binding)
    'resource' name=ID ('at' uri=STRING)? (tB+=HTTPTypeBinding* opsB+=HTTPOperationBinding+)?
;

CustomMediaType: 
	// TODO (future work) support full RFC as enum and do more with custom MIME types (required for REST maturity level 3)
	'media' 'type' name=ID 'as' value=STRING 
;

HTTPTypeBinding:
	CustomMediaType
	| 'data' 'type' dt=[DataContract] 'to' (mt+=[CustomMediaType] | smt+=StandardMediaType)+
	| 'relation' 'type' lt=[LinkContract] 'to' hml=HypermediaLink 
	// anything to be bound for event types and command types (newer features)? 
;

StandardMediaType:
	ianaName=STRING // link types vs. MIME types
;

HypermediaLink: // this is the DAP concept from "REST in Practice" 
	// TODO (future work) use or reference JSON-LS or HAL or IANA or ALPS or ...?
	'{' (local=[HTTPResourceBinding]|external=STRING) (',' verb=HTTPVerb (',' cmt=[CustomMediaType])?)? '}'
;

HTTPOperationBinding:
	// would like to reference [Operation] here; Xtext runs through but editor does not show references (?)  
	'operation' boundOperation=ID 'to' method=HTTPVerb // ('at' subresource=STRING)? // 'at' taken out
	(parameterBindings+=HTTPParameterBinding* | globalBinding=HTTPGlobalParameterBinding)
	reportBindings+=ReportBinding* // TODO for Java (and other technologies)
	securityBindings+=SecurityBinding* // TODO for other remoting technologies
	('accepts' inContentTypes=MediaTypeList)?
	('replies' outContentTypes=MediaTypeList)?
;

MediaTypeList:
	(cmt+=[CustomMediaType] | smt+=StandardMediaType)+
;

HTTPGlobalParameterBinding:
	'all' 'elements' 'realized' 'as' parameterMapping=HTTPParameter 'parameters'
;

// would like to use [ElementStructure] here but it does not have name=ID, 5.0.2 STRING now (consistency!)
HTTPParameterBinding:
	'element' (boundParameter=STRING) 'realized' 'as' parameterMapping=HTTPParameter 'parameter' ('with' details=ElementStructure)? 
	// type vs. instance elementStructureInstance rule? default value (JSON?)
;

enum HTTPVerb: GET | PUT | POST | PATCH | DELETE | HEAD | OPTIONS | TRACE
;

enum HTTPParameter: QUERY | HEADER | PATH | COOKIE | BODY // semantic rule: BODY is default; OAS: "query", "header", "path" or "cookie" (plus "formData" in Swagger2)
;

ReportBinding:
	'report' name=ID 'realized' 'as' httpStatusCode=INT ('with' details=STRING)?
;

SecurityBinding:
	// [SecurityPolicy] reference?
	'policy' name=ID 'realized' 'as' http=OASSecurity ('with' keys+=ID values+=STRING)*
;

enum OASSecurity: BASIC_AUTHENTICATION | JWT | API_KEY | OAUTH_IMPLICIT | OAUTH_FLOW | String; // any default?


JavaBinding:
	// TODO (future work) class name(s) cannot be bound/configured at present (unlike package and operations)
	java='Java' (binding='binding' ('package' package=STRING)? opsBinding+=JavaOperationBinding+)?
;

JavaOperationBinding:
	'operation' boundOperation=ID 'to' method=STRING // no "subresource" here
	pB+=JavaParameterBinding*
;

JavaParameterBinding:
	'element' (boundParameter=ID|any='*') 'realized' 'as' pm=JavaParameter 'type' // HTTP has more here
;

enum JavaParameter: byte | short | int | long | float | double | boolean | char | String; // String needed? or object/DTO required?


GRPCBinding:
	gRPC='gRPC' (binding='binding' opsBinding+=GRPCOperationBinding+)?
;

GRPCOperationBinding:
	'operation' boundOperation=ID ('to' method=STRING)? ('as' so=StreamingOption 'stream')?
;

enum StreamingOption:
	client | server | bidirectional // if not present, "unary" is assumed
;


OtherBinding:
    soap='SOAP_HTTP' | jsonrpc='JSON-RPC' | avro='Avro_RPC' | thrift='Thrift' | ws='Web_Sockets' | amqp='AMQP' | jms='JMS_ActiveMQ' | stomp='STOMP' | kafka='Kafka' | mqtt='MQTT' | other=STRING 
;


// **** SLA

SLA:
	'SLA' (builtin=InternalSLA | external=[SLATemplate])
;

SLATemplate:
	'SLA' 'template'
	name=ID
	slas+=InternalSLA
;

InternalSLA:
	('type' type=SLAType)? // note: not checked/used at present (semantic check?) 
	slos+=SLO+
	('penalty' penalties=STRING)?
	('notification' reporting=STRING)?
	rp=RatePlan? 
	rl+=RateLimit*
;

// TODO rename to 'Pricing Plan' (MAP)
RatePlan:
	'rate' 'plan' ('FREEMIUM' | "SUBSCRIPTION" | "USAGE_BASED") // note: actual pricing not modeled yet
;

RateLimit:
	'rate' 'limit' (none='NONE' | "MAX_CALLS" callRate=SimpleMeasurement | "DATA_QUOTA" dataRate=SimpleMeasurement) "within" interval=SimpleMeasurement// note: just a PoC/demo, can be modeled much better (see pattern/books)	
;

enum SLAType: 
	NONE  | IMPLICIT | INFORMAL | QUALITATIVE | QUANTITATIVE
;

SLO:
	'objective' 
    name=ID
	qualityGoal=STRING
	// ':'  
	measurement=Measurement
;

Measurement:
	sm=SimpleMeasurement | lz=LandingZone
;

// TODO could work with data types here, e.g., PT for three targets 

SimpleMeasurement:
	value=INT
	unitOfMeasure=('hours' | 'minutes' | 'seconds' | 'MB' | 'GB'| ID | STRING)? // not a full specification of units/measures, just a PoC/demo
;

LandingZone:
	'minimal' s=SimpleMeasurement
	'target' t=SimpleMeasurement
	('optimal' o=SimpleMeasurement)?
;

// **** evolution

enum EvolutionStrategy: 
	ETERNAL_LIFETIME | LIMITED_GUARANTEED_LIFETIME | TWO_IN_PRODUCTION | AGGRESSIVE_OBSOLESCENCE | EXPERIMENTAL_PREVIEW // MAPs
	| OTHER_STRATEGY | UNDISCLOSED // default: UNDISCLOSED
;


// *** C.2: Client 

Client:
	'API' 'client' name=ID
	('version' svi=SemanticVersioningIdentifier)? 
     cons+=Consumption+
;

Consumption: 
	'consumes' contract=[EndpointContract]
	// if present, the provider reference creates a fixed binding between client and server:
	('from' providerReference=[Provider] | 'through' gatewayReference=[Gateway])? // could also go down to endpoint level
	('via' 'protocol'  binding+=ClientBinding)? // must match provider-side information (linter!)
	// old syntax required resource binding to be specified since V5.0 (for HTTP protocol); this is fixed now (in slightly incompatible way)
;

ClientBinding:
    http='HTTP' | grpc='gRPC' | java='Java' | OtherBinding // add more precision, e.g. implementation info such as Feign?
;

// AsyncMDSL: 

MessageEndpoint:
	'message' 'endpoint' name=ID
	('of' 'type' types+=MessageEndpointType (',' types+=MessageEndpointType)*)?
	('serves' 'as' primaryRole=ResourceRole (',' otherRoles+=ResourceRole)* 'role'?)?
	('description' description=STRING)?
	'uses' 
		('channels' ':'
			channelsNoBroker+=AsyncConsumptionWithProtocolBinding (',' channelsNoBroker+=AsyncConsumptionWithProtocolBinding)*
		)?
	(channels+=AsyncConsumptionFromBroker (',' channels+=AsyncConsumptionFromBroker)*)?
;

enum MessageEndpointType:
	TRANSACTIONAL_CLIENT | POLLING_CONSUMER | EVENT_DRIVEN_CONSUMER | IDEMPOTENT_RECEIVER | MESSAGING_GATEWAY | MESSAGING_MAPPER | COMPETEING_CONSUMER | MESSAGE_DISPATCHER | SELECTIVE_CONSUMER | DURABLE_SUBSCRIBER | SERVICE_ACTIVATOR
;

AsyncConsumptionFromBroker:
	'from' broker=[MessageBroker] ':'
	channels+=AsyncConsumptionNoProtocolBinding (',' channels+=AsyncConsumptionNoProtocolBinding)*
	(binding+=ProtocolBinding)?
;

// this rule is actually used, [reference] in next two rules:
Channel:
	ChannelContract | RequestChannel | ReplyChannel
	// TODO change to cc=ChannelContract | reqc=RequestChannel | repc=ReplyChannel (impact on Xtend?)
;

AsyncConsumptionNoProtocolBinding:
	(channel=[Channel])
	(where=WhereConstruct)?
;

AsyncConsumptionWithProtocolBinding:
	(channel=[Channel])
	(where=WhereConstruct)?
	(binding+=ProtocolBinding)?
;

WhereConstruct:
	{WhereConstruct} 'where' 
	(whereClauses+=ConsumptionWhereClauses (',' whereClauses+=ConsumptionWhereClauses)*)?
		((',')? 'all' 'subscriptions' 'are' 'durable')?
;

ConsumptionWhereClauses:
		'consumed' 'if' leftExp=STRING op=BinaryOperator rightExpr=IfExpr
;

IfExpr:
	STRING | INT
;
BinaryOperator:
	'==' | '!=' | '>' | '<' | '<=' | '>='
;

// *** C.3: Gateway (experimental)

Gateway:
	('API' 'gateway' ) name=ID // | 'Message' 'broker' removed, was experimental
	('version' svi=SemanticVersioningIdentifier)? 
	gateList+=Gate+ // TODO (future work) implement validators (and adjust existing HTTP binding one)
	('evolution' 'governance' evolStrat=EvolutionStrategy)?
;

Gate:
	( 'offers' )  upstreamContract+=[EndpointContract]+ // | 'publishes' removed, was experimental
	endpoints+=EndpointInstance+ 
    cons+=Consumption
    ('mediates' dts+=DataTransformation)*
;

DataTransformation:
	'from' indc=[DataContract] 'to' outdc=[DataContract] // TODO add implementation hook/exit/callback info?
;


// *** C.4: Provider Implementation (experimental)

ProviderImplementation:
	'API' 'provider' 'implementation'
	name=ID
	'realizes' upstreamBinding=[Provider]
	'in' platform=ImplementationTechnology
	('as' class=STRING ('extending' superclass=STRING)? // default assigned if not specified
	| 'with' 'binding' downstreamBinding=[Provider])? // reference to Java protocol binding (optional)
;

// TODO add Data Transformation here (an API implementation may have data model that differs from that of API)
// it can be seen as a gateway from HTTP to local Java so might not need this grammar part at all

enum ImplementationTechnology: PlainJava /* | SpringMVC | vlingo */ | STRING
;	


// *** D: Service Orchestration (Events, Commands) and Integration Stories

IntegrationScenario:
	'scenario' name=ID ('type' type=ScenarioType)?
	('version' svi=SemanticVersioningIdentifier)?  
	stories+=IntegrationStory* // TODO could add related+=RelatedScenarios*
 ;

enum ScenarioType:
	BUSINESS_API | FRONTEND_INTEGRATION_SCENARIO | BACKEND_INTEGRATION_SCENARIO
;

IntegrationStory:
	('story' name=ID 
	('version' svi=SemanticVersioningIdentifier)?  
	('type' type=StoryType)? related+=RelatedStories*
	)? // for compatibility
	('when' condition=STRING)? 
	('a'|'an'|'the') (client=STRING | 'API' 'client') // location, description? 
	// action can become command detail (data?)
	'wants' 'to' action=Action on+=StoryObject* // CML has different approach (collections)
	('yielding' outcome=STRING)? // postcondition 
	('so' 'that' goal=STRING)? // business impact/effect
;

Action:
	plainAction=STRING | keyword=ActionKeyword ('a'|'an'|'the')? target=STRING // could try '*' here (CRUD in single story)
;

enum ActionKeyword:
	CRUD | CRUDSF | CQRS 
	// note: keywords such as 'create' would break operation naming - if present, operations can't be called create etc.
;

// V5.5.5: add 'the', 'about' and even more prepositions 
StoryObject:
	('with'|'against'|'for'|'at'|'in'|'to'|'on'|'from'|'and'|'into'|'within'|'via')? ('a'|'an'|'the'|'its')? object=STRING
;

enum StoryType:
	USER_STORY | JOB_STORY | TEST_CASE | API_MOCK // analysis vs. design? 
;

RelatedStories:
	'follows' related+=[IntegrationStory] | 'alternative' 'to' related+=[IntegrationStory] | 'parallel' 'to' related+=[IntegrationStory]
;

// flow syntax adapted from CML grammar at https://github.com/ContextMapper/context-mapper-dsl/blob/master/org.contextmapper.dsl/src/org/contextmapper/dsl/ContextMappingDSL.xtext

Orchestration:
	'flow' name=ID 
	('version' svi=SemanticVersioningIdentifier)?  
	('realizes' scenario=[IntegrationScenario])? ('type' type=FlowType)? 
	steps+=FlowStep* 
	flowBinding=OrchestrationBinding?
;

enum FlowType: 
	APPLICATION_FLOW  | INTEGRATION_FLOW /* EIP */ | SERVICE_ORCHESTRATION | API_CALL_SEQUENCING /* conversation in MAP */ | EVENT_SOURCING
;

// experimental flow binding (not from CML):
 
OrchestrationBinding:
	'binding' /* 'flow' */ 'to' (eptb+=EndpointTypeBinding|cb+=ChannelBinding)+
	('implemented' 'as' ft=FlowTechnology)? 
	// TODO (future work) add detailed information required for code generation, e.g., Aggregator timeouts in Camel
;

EndpointTypeBinding:
	'endpoint' 'type' epcs+=[EndpointContract] stepBindings+=StepToEndpointBinding* ('provider' provider=[Provider])? // and/or ('client' client=[Client])? or Gateway?
;

ChannelBinding:
	'channel' 'type' channels+=[ChannelContract] stepBindings+=StepToChannelBinding* ('provider' provider=[MessageBroker])? // TODO test; add MessageEndpoint too?
;

FlowTechnology:
	'APACHE_CAMEL_ROUTE' | 'SPRING_INTEGRATION_FLOW' | 'BPMN_PROCESS' | 'BPEL_PROCESS' | 'YET_ANOTHER_FLOW_LANGUAGE' | 'PLAIN_PROGRAMMING' | STRING
;

StepToEndpointBinding:
	eob=EventToOperationBinding | cob=CommandToOperationBinding // e.g. Feign or JAX-RS as impl. tech.?
;

StepToChannelBinding:
	emb=EventToMessageBinding | cmb=CommandToMessageBinding // e.g. Feign or JAX-RS as impl. tech.?
;

EventToOperationBinding:
	'event' event=[EventType] 'to' 'operation' operation=ID // TODO validate ID in linter
	('with' 'mediation' dt=DataTransformation)? // experimental
;

CommandToOperationBinding:
	'command' command=[CommandType] 'to' 'operation' operation=ID // TODO validate ID in linter
	('with' 'mediation' dt=DataTransformation)? // experimental
;

EventToMessageBinding:
	'event' event=[EventType] 'to' 'message' requesReplyChannelMessage=ID // AsyncMDSL: [Message] not possible
	// TODO mediation? could be separate channel/filter/channel config. with ContentFilter, etc. (EIPs)
;

CommandToMessageBinding:
	'command' command=[CommandType] 'to' 'message' oneWayChannelMsg=ID // AsyncMDSL: [Message] not possible
	// TODO mediation? could be separate channel/filter/channel config. with ContentFilter, etc. (EIPs)
;
	
// ServiceOperation: (typeref=ID '.')? opref=ID; // can't reference [operations], regrettably

FlowStep:
	depStep=DomainEventProductionStep | cisStep=CommandInvokationStep | eceStep=CombinedInvocationStep
;

// TODO add <<EIP>> decorators, for instance for Aggregation strategy and wait behavior

CombinedInvocationStep:
	cisStep=CommandInvokationStep ('emits'|'emit') ('event'|'events') eventProduction=EventProduction
;

DomainEventProductionStep:
	// this corresponds to app flow state transitions in CML, see https://contextmapper.org/docs/application-and-process-layer/
	// simplified not to break SOAD refinement flow, renamed aggregate=[EndpointContract] to contractAndOperation=[EndpointContract]
	action=EitherCommandOrOperation /* ('delegates' 'to' contractAndOperation=[EndpointContract] ('[' stateTransition=StateTransition ']')?)?  */ ('emits'|'emit') ('event'|'events') eventProduction=EventProduction
;

CommandInvokationStep:
	// no support for 'or' and 'xor' here, can be modelled with two steps triggering/invoking different commands (same event(s) on the left)
	('event'|'events') events+=[EventType] (('+' | 'and' ) events+=[EventType])* ('triggers'|'trigger') action=EitherCommandOrOperationInvokation
;
 
// no AND, OR, no XOR here (not needed, can be modelled with two separate steps with same command(s) on left side)
EitherCommandOrOperation:
	('command' command=[CommandType] /* | 'operation' operation=ServiceOperation */) ('[' 'initiated' 'by' actor=STRING ']')?
;

EitherCommandOrOperationInvokation:
	(('command'|'commands') ci=CommandInvokation) | ('flow'  spi=SubProcessInvocation) /* | oi=OperationInvokation */ // taken out (from CML)
;

SubProcessInvocation:
	// 'flow' subprocess=[Orchestration] 
	subprocess=[Orchestration] 
;

CommandInvokation:
	// ('command'|'commands') (sci=SingleCommandInvokation | cci=ConcurrentCommandInvokation | eaci=ExclusiveAlternativeCommandInvokation | iaci=InclusiveAlternativeCommandInvokation)
	(sci=SingleCommandInvokation | cci=ConcurrentCommandInvokation | eaci=ExclusiveAlternativeCommandInvokation | iaci=InclusiveAlternativeCommandInvokation)
;

SingleCommandInvokation:
	commands+=[CommandType]
;

ConcurrentCommandInvokation:
	commands+=[CommandType] (('+' | 'and') commands+=[CommandType])+
;

ExclusiveAlternativeCommandInvokation:
	commands+=[CommandType] (('x' | 'X' | 'xor' | 'alternatively') commands+=[CommandType])+
;

InclusiveAlternativeCommandInvokation:
	commands+=[CommandType] (('o' | 'O' | 'or') commands+=[CommandType])+
;

// operation related rules from CML removed

EventProduction:
	sep=SingleEventProduction | mep=MultipleEventProduction | eaep=ExclusiveAlternativeEventProduction | iaep=InclusiveAlternativeEventProduction
;

SingleEventProduction:
	events+=[EventType]
;

MultipleEventProduction:
	events+=[EventType] (('+' | 'and' ) events+=[EventType])+
;

ExclusiveAlternativeEventProduction:
	events+=[EventType] (('x' | 'X' | 'xor' | 'alternatively') events+=[EventType])+
;

InclusiveAlternativeEventProduction:
	events+=[EventType] (('o' | 'O' | 'or') events+=[EventType])+
;

// ** End of MDSL grammar 
