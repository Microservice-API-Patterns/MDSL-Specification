module io.mdsl.GenerateAPIDescription

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."

Workflow {
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "io.mdsl"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\r\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
				preferXtendStubs = false
			}
		}
		language = StandardLanguage {
			name = "io.mdsl.APIDescription"
			fileExtensions = "mdsl"

			serializer = {
				generateStub = false
			}
			validator = {
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				composedCheck = "io.mdsl.validation.DataTypeValidator"
				composedCheck = "io.mdsl.validation.EndpointContractValidator"
				composedCheck = "io.mdsl.validation.OperationValidator"
				composedCheck = "io.mdsl.validation.MAPDecoratorValidator"
				composedCheck = "io.mdsl.validation.BasicBindingValidator"
				composedCheck = "io.mdsl.validation.HTTPBindingValidator"
				composedCheck = "io.mdsl.validation.OneWayChannelValidator"
				composedCheck = "io.mdsl.validation.ChannelContractValidator"
				composedCheck = "io.mdsl.validation.MessageEndpointValidator"
				composedCheck = "io.mdsl.validation.RuntimeExpressionValidator"
				composedCheck = "io.mdsl.validation.EventValidator"
				composedCheck = "io.mdsl.validation.FlowValidator"
				composedCheck = "io.mdsl.validation.ScenarioValidator"
			}
			formatter = {
				generateStub = true
				generateXtendStub = true // needed? any effect?
			}
			generator = {
				generateXtendStub = false
			}
			junitSupport = {
				junitVersion = "5"
				generateStub = false
			}
		}
	}
}
